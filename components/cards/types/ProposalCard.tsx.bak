// components/cards/types/ProposalCard.tsx
import React from 'react';
import { BaseCardProps } from '../../../lib/engagement/types/cardTypes';
import BaseCard from '../base/BaseCard';

// Define the subset of props needed for ProposalCard
export interface ProposalCardProps {
  id: string;
  title: string;
  summary: string;
  imageUrl?: string;
  proposer: {
    name: string;
    id: string;
    stats?: {
      written?: number;
      proposed?: number;
      location?: string;
    };
  };
  createdAt: string;
  location?: {
    city: string;
    state: string;
    neighborhood?: string;
  };
  category?: string;
  tags?: string[];
  status: 'active' | 'completed' | 'canceled';
  funding: {
    amount: number;
    goal: number;
    percentage?: number;
  };
  metrics?: {
    reactions?: Record<string, number>;
    supporters?: number;
    journalistInterest?: number;
  };
  distribution?: {
    proposer?: number;
    platform?: number;
    futureAuthor?: number;
  };
  contentHash?: string;
  onClick?: () => void;
  className?: string;
}

// Create ProposalBadge component
const ProposalBadge: React.FC<{status: 'active' | 'completed' | 'canceled'}> = ({status}) => {
  const getLabel = () => {
    switch (status) {
      case 'active': return 'Open Proposal';
      case 'completed': return 'Completed';
      case 'canceled': return 'Canceled';
      default: return 'Proposal';
    }
  };
  
  return (
    <span className={`badge proposal-badge ${status}`}>
      {getLabel()}
    </span>
  );
};

// Create BookmarkButton component
const BookmarkButton: React.FC<{onClick?: (e: React.MouseEvent) => void}> = ({onClick}) => (
  <div 
    className="action-icon bookmark-icon tooltip" 
    data-tooltip="Bookmark (Free for subscribers)"
    onClick={(e) => {
      e.stopPropagation();
      onClick?.(e);
    }}
  >
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
      <path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.777.416L8 13.101l-5.223 2.815A.5.5 0 0 1 2 15.5V2zm2-1a1 1 0 0 0-1 1v12.566l4.723-2.482a.5.5 0 0 1 .554 0L13 14.566V2a1 1 0 0 0-1-1H4z"/>
    </svg>
  </div>
);

// Create ShareButton component
const ShareButton: React.FC<{onClick?: (e: React.MouseEvent) => void}> = ({onClick}) => (
  <div 
    className="action-icon link-icon tooltip" 
    data-tooltip="Copy Link"
    onClick={(e) => {
      e.stopPropagation();
      onClick?.(e);
    }}
  >
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
      <path d="M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1.002 1.002 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4.018 4.018 0 0 1-.128-1.287z"/>
      <path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243L6.586 4.672z"/>
    </svg>
  </div>
);

const ProposalCard: React.FC<ProposalCardProps> = ({
  id,
  title,
  summary,
  imageUrl,
  proposer,
  createdAt,
  location,
  category,
  tags = [],
  status,
  funding,
  metrics,
  distribution,
  contentHash,
  onClick,
  className,
}) => {
  // Format date for display
  const formattedDate = `Proposed: ${new Date(createdAt).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric'
  })}`;

  // Prepare badges
  const badges = [
    <ProposalBadge key="status" status={status} />
  ];

  // Prepare action buttons
  const actionButtons = [
    <BookmarkButton key="bookmark" onClick={() => console.log('Bookmark clicked')} />,
    <ShareButton key="share" onClick={() => console.log('Share clicked')} />
  ];

  // Calculate funding percentage if not provided
  const fundingPercentage = funding.percentage ?? (funding.amount / funding.goal * 100);

  // Create props for BaseCard
  const baseCardProps: BaseCardProps = {
    id,
    title,
    summary,
    imageUrl,
    contentType: 'proposal',
    createdAt: formattedDate,
    location,
    category,
    tags,
    proposerInfo: {
      name: proposer.name
    },
    contentHash,
    engagementMetrics: {
      reactions: metrics?.reactions,
      supporters: metrics?.supporters
    },
    distribution,
    fundingInfo: {
      raised: funding.amount,
      goal: funding.goal,
      percentage: fundingPercentage
    },
    badges,
    actionButtons,
    onClick,
    className
  };

  return <BaseCard {...baseCardProps} />;
};

export default ProposalCard;
// components/profile/ArticlesTab.tsx
'use client'

import React, { useState, useEffect } from 'react';
import { ethers } from 'ethers';
import { useRouter } from 'next/navigation';
import { useWallet } from '@/lib/hooks/useWallet';
import EncryptedArticleReadService from '@/lib/blockchain/contracts/EncryptedArticleReadService';

interface EncryptedArticle {
  id: string;
  title: string;
  summary: string;
  author: string;
  location: string;
  category: string;
  publishedAt: string;
}

interface MarketplaceData {
  nftCount: number;
  nftPrice: string;
  mintedCount: number;
  availableCount: number;
  ownerCount: number;
  readerCount: number;
}

interface ArticlesTabProps {
  profile: {
    walletAddress: string;
    displayName?: string;
  };
}

const ARTICLE_CONTRACT_ADDRESS = '0xd99aB3390aAF8BC69940626cdbbBf22F436c6753';
const AMM_CONTRACT_ADDRESS = '0x4E0f2A3A8AfEd1f86D83AAB1a989E01c316996d2';

const ArticlesTab: React.FC<ArticlesTabProps> = ({ profile }) => {
  const router = useRouter();
  const { provider } = useWallet();
  const [articles, setArticles] = useState<EncryptedArticle[]>([]);
  const [marketplaceData, setMarketplaceData] = useState<Record<string, MarketplaceData>>({});
  const [loading, setLoading] = useState(true);
  const [loadingMarketplace, setLoadingMarketplace] = useState(false);
  const [purchasingId, setPurchasingId] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  // Fetch marketplace data for an article
  const fetchMarketplaceData = async (articleId: string): Promise<MarketplaceData> => {
    try {
      const provider = new ethers.JsonRpcProvider('https://testnet.evm.nodes.onflow.org');
      
      // Article contract for NFT data
      const articleContract = new ethers.Contract(
        ARTICLE_CONTRACT_ADDRESS,
        [
          "event ArticlePublished(uint256 indexed articleId, address indexed author, string title, string location, uint256 nftCount, uint256 nftPrice)",
          "event NFTMinted(uint256 indexed tokenId, uint256 indexed articleId, address indexed buyer, uint256 editionNumber, uint256 price, uint256 licensesGenerated)"
        ],
        provider
      );

      // AMM contract for license data
      const ammContract = new ethers.Contract(
        AMM_CONTRACT_ADDRESS,
        ["function balanceOf(address, uint256) view returns (uint256)"],
        provider
      );

      // Get article publication data
      const articleFilter = articleContract.filters.ArticlePublished(parseInt(articleId));
      const articleEvents = await articleContract.queryFilter(articleFilter, 0, 'latest');
      
      let nftCount = 0;
      let nftPrice = '0';
      
      if (articleEvents.length > 0) {
        const event = articleEvents[0] as ethers.EventLog;
        nftCount = Number(event.args.nftCount);
        nftPrice = ethers.formatEther(event.args.nftPrice);
      }

      // Get minted NFTs count
      const nftFilter = articleContract.filters.NFTMinted(null, parseInt(articleId));
      const nftEvents = await articleContract.queryFilter(nftFilter, 0, 'latest');
      const mintedCount = nftEvents.length;
      
      // Get unique owners count
      const uniqueOwners = new Set(nftEvents.map(event => (event as ethers.EventLog).args.buyer));
      const ownerCount = uniqueOwners.size;

      // For reader count, we'd need to check license balances
      // This is a simplified approach - in reality we'd need to track all license holders
      const readerCount = Math.max(ownerCount, 0); // Placeholder logic

      return {
        nftCount,
        nftPrice,
        mintedCount,
        availableCount: Math.max(nftCount - mintedCount, 0),
        ownerCount,
        readerCount
      };
    } catch (error) {
      console.error(`Error fetching marketplace data for article ${articleId}:`, error);
      // Return default values on error
      return {
        nftCount: 10, // Default edition size
        nftPrice: '2.5', // Default price
        mintedCount: 0,
        availableCount: 10,
        ownerCount: 0,
        readerCount: 0
      };
    }
  };

  useEffect(() => {
    async function fetchArticles() {
      if (!profile?.walletAddress) return;
      
      try {
        setLoading(true);
        setError(null);
        
        const service = new EncryptedArticleReadService();
        const totalArticles = await service.getTotalArticles();
        
        const userArticles: EncryptedArticle[] = [];
        
        // Check each article to see if it belongs to this user
        for (let i = 1; i <= totalArticles; i++) {
          try {
            const article = await service.getArticle(i);
            
            // Check if this article belongs to the profile owner
            if (article.author.toLowerCase() === profile.walletAddress.toLowerCase()) {
              userArticles.push({
                id: article.id.toString(),
                title: article.title,
                summary: article.summary,
                author: article.author,
                location: article.location,
                category: article.category,
                publishedAt: new Date(Number(article.publishedAt) * 1000).toLocaleDateString('en-US', {
                  year: 'numeric',
                  month: 'short',
                  day: 'numeric'
                })
              });
            }
          } catch (articleError) {
            // Skip articles that can't be read
            continue;
          }
        }
        
        // Sort by published date (newest first)
        userArticles.sort((a, b) => new Date(b.publishedAt).getTime() - new Date(a.publishedAt).getTime());
        
        setArticles(userArticles);
        setLoading(false); // Set loading false here so articles appear immediately

        // PARALLEL FETCH: Fetch marketplace data for all articles at once
        if (userArticles.length > 0) {
          console.log('🚀 Starting parallel marketplace data fetch for', userArticles.length, 'articles');
          setLoadingMarketplace(true);
          
          const marketplacePromises = userArticles.map(article => 
            fetchMarketplaceData(article.id).catch(error => {
              console.warn(`Failed to fetch marketplace data for article ${article.id}:`, error);
              // Return default data on error
              return {
                nftCount: 10,
                nftPrice: '2.5',
                mintedCount: 0,
                availableCount: 10,
                ownerCount: 0,
                readerCount: 0
              };
            })
          );

          // Wait for all marketplace data to load in parallel
          const marketplaceResults = await Promise.all(marketplacePromises);
          
          // Create marketplace data map
          const marketplaceDataMap: Record<string, MarketplaceData> = {};
          userArticles.forEach((article, index) => {
            marketplaceDataMap[article.id] = marketplaceResults[index];
          });
          
          setMarketplaceData(marketplaceDataMap);
          setLoadingMarketplace(false);
          console.log('✅ Marketplace data loaded for all articles');
        }
        
      } catch (error) {
        console.error('Error fetching articles:', error);
        setError('Failed to load articles');
        setLoading(false);
      }
    }
    
    fetchArticles();
  }, [profile?.walletAddress]);

  const handleCardClick = (articleId: string) => {
    router.push(`/miami/news/general/native_${articleId}`);
  };

  const handleBuyNFT = async (e: React.MouseEvent, articleId: string, marketData: MarketplaceData) => {
    e.stopPropagation();
    
    if (marketData.availableCount === 0) {
      return;
    }

    if (!provider) {
      alert('Please connect your wallet');
      return;
    }

    setPurchasingId(articleId);
    console.log(`🛒 Starting purchase for article ${articleId} at ${marketData.nftPrice} FLOW`);

    try {
      const signer = await provider.getSigner();
      const contract = new ethers.Contract(
        ARTICLE_CONTRACT_ADDRESS,
        [
          "function mintNFTEdition(uint256) payable"
        ],
        signer
      );
      
      const totalPrice = ethers.parseEther(marketData.nftPrice) + ethers.parseEther('1'); // NFT price + 1 FLOW buyer fee
      
      console.log('💰 Total transaction cost:', ethers.formatEther(totalPrice), 'FLOW');
      
      const tx = await contract.mintNFTEdition(parseInt(articleId), {
        value: totalPrice,
        gasLimit: 500000
      });

      console.log('📝 Transaction sent:', tx.hash);
      await tx.wait();
      console.log('✅ NFT purchased successfully!');
      
      // Refresh marketplace data
      const updatedMarketData = await fetchMarketplaceData(articleId);
      setMarketplaceData(prev => ({
        ...prev,
        [articleId]: updatedMarketData
      }));
      
      alert('NFT purchased successfully!');
      
    } catch (error: any) {
      console.error('❌ Purchase error:', error);
      if (error.code === 'ACTION_REJECTED') {
        console.log('User cancelled transaction');
      } else {
        alert('Purchase failed: ' + (error.message || 'Unknown error'));
      }
    } finally {
      setPurchasingId(null);
    }
  };

  const handleReadNow = (e: React.MouseEvent, articleId: string) => {
    e.stopPropagation(); // Prevent card click
    router.push(`/miami/news/general/native_${articleId}`);
  };

  if (loading) {
    return (
      <div style={{
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        padding: '3rem',
        color: 'var(--color-black)',
        opacity: 0.7,
      }}>
        <div style={{
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          gap: '1rem',
        }}>
          <div style={{
            width: '40px',
            height: '40px',
            border: '3px solid var(--color-digital-silver)',
            borderTop: '3px solid var(--color-typewriter-red)',
            borderRadius: '50%',
            animation: 'spin 1s linear infinite',
          }}></div>
          <span style={{ fontFamily: 'var(--font-ui)' }}>Loading articles...</span>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div style={{
        textAlign: 'center',
        padding: '3rem',
        color: 'var(--color-typewriter-red)',
      }}>
        <h3 style={{
          fontFamily: 'var(--font-headlines)',
          marginBottom: '1rem',
        }}>
          Error Loading Articles
        </h3>
        <p>{error}</p>
      </div>
    );
  }

  if (articles.length === 0) {
    return (
      <div style={{
        textAlign: 'center',
        padding: '3rem',
        color: 'var(--color-black)',
        opacity: 0.7,
      }}>
        <div style={{
          fontSize: '3rem',
          marginBottom: '1rem',
        }}>
          📝
        </div>
        <h3 style={{
          fontFamily: 'var(--font-headlines)',
          fontSize: '1.5rem',
          marginBottom: '1rem',
        }}>
          No Articles Published Yet
        </h3>
        <p style={{
          fontSize: '1rem',
          lineHeight: '1.5',
          maxWidth: '400px',
          margin: '0 auto',
        }}>
          This user hasn't published any native articles yet. Published articles will appear here.
        </p>
      </div>
    );
  }

  return (
    <div>
      <div style={{
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: '1.5rem',
      }}>
        <h2 style={{
          fontFamily: 'var(--font-headlines)',
          fontSize: '1.5rem',
          margin: 0,
        }}>
          Published Articles ({articles.length})
        </h2>
        
        {loadingMarketplace && (
          <div style={{
            display: 'flex',
            alignItems: 'center',
            gap: '0.5rem',
            fontSize: '0.9rem',
            color: 'var(--color-black)',
            opacity: 0.7,
          }}>
            <div style={{
              width: '16px',
              height: '16px',
              border: '2px solid var(--color-digital-silver)',
              borderTop: '2px solid var(--color-blockchain-blue)',
              borderRadius: '50%',
              animation: 'spin 1s linear infinite',
            }}></div>
            Loading marketplace data...
          </div>
        )}
      </div>

      <div style={{
        display: 'grid',
        gridTemplateColumns: 'repeat(auto-fit, minmax(380px, 1fr))',
        gap: '1.5rem',
      }}>
        {articles.map((article, index) => {
          const marketData = marketplaceData[article.id] || {
            nftCount: 10,
            nftPrice: '2.5',
            mintedCount: 0,
            availableCount: 10,
            ownerCount: 0,
            readerCount: 0
          };

          const isMarketDataLoaded = !!marketplaceData[article.id];
          const isPurchasing = purchasingId === article.id;

          return (
            <div
              key={article.id}
              onClick={() => handleCardClick(article.id)}
              style={{
                backgroundColor: 'var(--color-white)',
                border: '2px solid var(--color-digital-silver)',
                borderRadius: '12px',
                overflow: 'hidden',
                cursor: 'pointer',
                transition: 'all 0.3s ease',
                boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',
              }}
              onMouseOver={(e) => {
                e.currentTarget.style.transform = 'translateY(-4px)';
                e.currentTarget.style.boxShadow = '0 8px 20px rgba(0, 0, 0, 0.15)';
                e.currentTarget.style.borderColor = 'var(--color-typewriter-red)';
              }}
              onMouseOut={(e) => {
                e.currentTarget.style.transform = 'translateY(0)';
                e.currentTarget.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.1)';
                e.currentTarget.style.borderColor = 'var(--color-digital-silver)';
              }}
            >
              {/* NFT Edition Header */}
              <div style={{
                padding: '1rem 1.5rem',
                backgroundColor: 'var(--color-parchment)',
                borderBottom: '1px solid var(--color-digital-silver)',
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
              }}>
                <div style={{
                  display: 'flex',
                  gap: '1rem',
                  alignItems: 'center',
                }}>
                  <span style={{
                    backgroundColor: 'var(--color-blockchain-blue)',
                    color: 'white',
                    padding: '4px 12px',
                    borderRadius: '20px',
                    fontSize: '0.75rem',
                    fontWeight: '600',
                    fontFamily: 'var(--font-ui)',
                  }}>
                    Edition {index + 1} of {marketData.nftCount}
                  </span>
                  
                  <span style={{
                    fontSize: '0.8rem',
                    fontWeight: '500',
                    color: marketData.availableCount > 0 ? 'var(--color-verification-green)' : 'var(--color-typewriter-red)',
                    opacity: isMarketDataLoaded ? 1 : 0.5,
                  }}>
                    {marketData.availableCount > 0 ? `${marketData.availableCount} available` : 'Sold Out'}
                  </span>
                </div>

                <span style={{
                  backgroundColor: 'var(--color-typewriter-red)',
                  color: 'white',
                  fontSize: '0.75rem',
                  fontWeight: 'bold',
                  padding: '0.25rem 0.5rem',
                  borderRadius: '4px',
                  textTransform: 'uppercase',
                }}>
                  Native Article
                </span>
              </div>

              {/* Article Content */}
              <div style={{
                padding: '1.5rem',
              }}>
                <h3 style={{
                  fontFamily: 'var(--font-headlines)',
                  fontSize: '1.3rem',
                  margin: '0 0 0.75rem 0',
                  lineHeight: '1.3',
                  color: 'var(--color-black)',
                }}>
                  {article.title}
                </h3>

                <p style={{
                  fontSize: '0.95rem',
                  color: 'var(--color-black)',
                  opacity: 0.8,
                  lineHeight: '1.5',
                  margin: '0 0 1rem 0',
                  display: '-webkit-box',
                  WebkitLineClamp: 3,
                  WebkitBoxOrient: 'vertical',
                  overflow: 'hidden',
                }}>
                  {article.summary}
                </p>

                <div style={{
                  display: 'flex',
                  flexWrap: 'wrap',
                  gap: '0.5rem',
                  fontSize: '0.8rem',
                  color: 'var(--color-black)',
                  opacity: 0.7,
                  marginBottom: '1.5rem',
                }}>
                  <span style={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: '0.25rem',
                  }}>
                    <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                      <path d="M8 2v4l-6 6h6l-1 8 8-8h-6l1-8z"></path>
                    </svg>
                    {article.category}
                  </span>
                  
                  <span>•</span>
                  
                  <span style={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: '0.25rem',
                  }}>
                    <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                      <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                      <circle cx="12" cy="10" r="3"></circle>
                    </svg>
                    {article.location}
                  </span>
                  
                  <span>•</span>
                  
                  <span>{article.publishedAt}</span>
                </div>

                {/* Market Information */}
                <div style={{
                  backgroundColor: 'rgba(43, 57, 144, 0.05)',
                  padding: '1rem',
                  borderRadius: '8px',
                  marginBottom: '1.5rem',
                  opacity: isMarketDataLoaded ? 1 : 0.7,
                }}>
                  <div style={{
                    display: 'grid',
                    gridTemplateColumns: '1fr 1fr',
                    gap: '1rem',
                    marginBottom: '0.75rem',
                  }}>
                    <div style={{ textAlign: 'center' }}>
                      <div style={{
                        fontSize: '0.75rem',
                        color: '#666',
                        marginBottom: '0.25rem',
                        fontFamily: 'var(--font-ui)',
                      }}>
                        Reading License
                      </div>
                      <div style={{
                        fontSize: '1rem',
                        fontWeight: '600',
                        color: 'var(--color-verification-green)',
                      }}>
                        0.1 FLOW
                      </div>
                    </div>
                    
                    <div style={{ textAlign: 'center' }}>
                      <div style={{
                        fontSize: '0.75rem',
                        color: '#666',
                        marginBottom: '0.25rem',
                        fontFamily: 'var(--font-ui)',
                      }}>
                        Full NFT
                      </div>
                      <div style={{
                        fontSize: '1rem',
                        fontWeight: '600',
                        color: 'var(--color-typewriter-red)',
                      }}>
                        {isMarketDataLoaded ? `${marketData.nftPrice} FLOW` : 'Loading...'}
                      </div>
                    </div>
                  </div>
                  
                  <div style={{
                    display: 'flex',
                    justifyContent: 'space-around',
                    fontSize: '0.8rem',
                    color: '#666',
                  }}>
                    <span>📖 {marketData.readerCount} readers</span>
                    <span>👥 {marketData.ownerCount} owners</span>
                  </div>
                </div>

                {/* Action Buttons */}
                <div style={{
                  display: 'grid',
                  gridTemplateColumns: '1fr 1fr',
                  gap: '0.75rem',
                }}>
                  <button
                    onClick={(e) => handleReadNow(e, article.id)}
                    style={{
                      backgroundColor: 'var(--color-verification-green)',
                      color: 'white',
                      border: 'none',
                      borderRadius: '6px',
                      padding: '0.75rem 1rem',
                      fontSize: '0.85rem',
                      fontWeight: '600',
                      cursor: 'pointer',
                      transition: 'background-color 0.2s',
                      fontFamily: 'var(--font-ui)',
                    }}
                    onMouseOver={(e) => {
                      e.currentTarget.style.backgroundColor = '#166B5C';
                    }}
                    onMouseOut={(e) => {
                      e.currentTarget.style.backgroundColor = 'var(--color-verification-green)';
                    }}
                  >
                    Read Now
                  </button>

                  <button
                    onClick={(e) => handleBuyNFT(e, article.id, marketData)}
                    disabled={marketData.availableCount === 0 || isPurchasing}
                    style={{
                      backgroundColor: marketData.availableCount === 0 
                        ? 'var(--color-verification-green)' 
                        : isPurchasing
                          ? '#9CA3AF'
                          : isMarketDataLoaded 
                            ? 'var(--color-blockchain-blue)'
                            : '#9CA3AF',
                      color: 'white',
                      border: 'none',
                      borderRadius: '6px',
                      padding: '0.75rem 1rem',
                      fontSize: '0.85rem',
                      fontWeight: '600',
                      cursor: (marketData.availableCount === 0 || isPurchasing) ? 'not-allowed' : 'pointer',
                      transition: 'background-color 0.2s',
                      fontFamily: 'var(--font-ui)',
                      opacity: (marketData.availableCount === 0 || isPurchasing) ? 0.7 : 1,
                    }}
                    onMouseOver={(e) => {
                      if (marketData.availableCount > 0 && !isPurchasing && isMarketDataLoaded) {
                        e.currentTarget.style.backgroundColor = '#1E2875';
                      }
                    }}
                    onMouseOut={(e) => {
                      if (marketData.availableCount > 0 && !isPurchasing && isMarketDataLoaded) {
                        e.currentTarget.style.backgroundColor = 'var(--color-blockchain-blue)';
                      }
                    }}
                  >
                    {isPurchasing 
                      ? 'Purchasing...'
                      : marketData.availableCount === 0 
                        ? 'Sold Out' 
                        : !isMarketDataLoaded
                          ? 'Loading...'
                          : `Buy NFT (${(parseFloat(marketData.nftPrice) + 1).toFixed(1)} FLOW)`}
                  </button>
                </div>

                {/* Verification Badge */}
                <div style={{
                  marginTop: '1rem',
                  fontSize: '0.8rem',
                  color: 'var(--color-verification-green)',
                  fontFamily: 'var(--font-ui)',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '0.5rem',
                }}>
                  <span>⛓️</span>
                  <span>Blockchain Verified & Encrypted</span>
                  {!isMarketDataLoaded && (
                    <span style={{ opacity: 0.5 }}>(Loading pricing...)</span>
                  )}
                </div>
              </div>
            </div>
          );
        })}
      </div>

      <style jsx>{`
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
      `}</style>
    </div>
  );
};

export default ArticlesTab;
// components/profile/Bookmarks.tsx
'use client'

import React, { useState, useEffect } from 'react';
import { ethers } from 'ethers';
import BookmarkCard from './BookmarkCard';
import BookmarkDetailModal from './modals/BookmarkDetailModal';
import BookmarkContractService, { ContentType, Bookmark } from '@/lib/blockchain/contracts/BookmarkContract';
import { Profile } from '../../lib/profile/types/profile';

interface BookmarksProps {
  profile: Profile;
  isOwner: boolean;
}

interface BookmarkedContent {
  id: string;
  title: string;
  summary: string;
  contentType: 'article' | 'proposal';
  author?: {
    name: string;
    address: string;
  };
  proposer?: {
    name: string;
    address: string;
  };
  createdAt: string;
  bookmarkedAt: string;
  category?: string;
  tags?: string[];
  imageUrl?: string;
  location?: {
    city: string;
    state: string;
  };
  metrics?: {
    views?: number;
    comments?: number;
    reactions?: number;
    fundingAmount?: number;
    fundingGoal?: number;
  };
}

const CONTRACT_ADDRESS = '0x66f856f960AEF5011FdCc7383B9F81d2515930c9';

const Bookmarks: React.FC<BookmarksProps> = ({ profile, isOwner }) => {
  // State for bookmarks and data
  const [bookmarks, setBookmarks] = useState<Bookmark[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [filter, setFilter] = useState<'all' | 'articles' | 'proposals'>('all');

  // Modal state
  const [modalOpen, setModalOpen] = useState(false);
  const [modalData, setModalData] = useState<BookmarkedContent | null>(null);

  // Load bookmarks data from blockchain
  useEffect(() => {
    async function loadBookmarks() {
      if (!profile.walletAddress) return;

      try {
        setLoading(true);
        setError(null);

        const provider = new ethers.JsonRpcProvider('https://testnet.evm.nodes.onflow.org');
        const service = new BookmarkContractService(CONTRACT_ADDRESS, provider);
        
        // Get user's bookmarks
        const userBookmarks = await service.getUserBookmarks(profile.walletAddress);
        
        setBookmarks(userBookmarks);
      } catch (err: any) {
        console.error('Error loading bookmarks:', err);
        setError(err.message || 'Failed to load bookmarks');
      } finally {
        setLoading(false);
      }
    }

    loadBookmarks();
  }, [profile.walletAddress]);

  // Transform bookmarks for display
  const transformBookmarkForDisplay = (bookmark: Bookmark): BookmarkedContent => {
    return {
      id: bookmark.contentId,
      title: `${bookmark.contentType === ContentType.ARTICLE ? 'Article' : 'Proposal'} #${bookmark.contentId}`,
      summary: 'Bookmarked content - click to view details',
      contentType: bookmark.contentType === ContentType.ARTICLE ? 'article' : 'proposal',
      createdAt: new Date(Number(bookmark.timestamp) * 1000).toISOString(),
      bookmarkedAt: new Date(Number(bookmark.timestamp) * 1000).toISOString(),
      category: bookmark.contentType === ContentType.ARTICLE ? 'News' : 'Community',
      location: {
        city: 'Miami',
        state: 'FL'
      }
    };
  };

  const openModal = (bookmark: BookmarkedContent) => {
    setModalData(bookmark);
    setModalOpen(true);
  };

  // Filter bookmarks
  const filteredBookmarks = bookmarks.filter(bookmark => {
    if (filter === 'all') return true;
    if (filter === 'articles') return bookmark.contentType === ContentType.ARTICLE;
    if (filter === 'proposals') return bookmark.contentType === ContentType.PROPOSAL;
    return true;
  });

  const articleBookmarks = bookmarks.filter(b => b.contentType === ContentType.ARTICLE);
  const proposalBookmarks = bookmarks.filter(b => b.contentType === ContentType.PROPOSAL);

  if (loading) {
    return (
      <div style={{
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        minHeight: '200px',
        color: 'var(--color-black)',
        opacity: 0.7,
      }}>
        <div style={{ textAlign: 'center' }}>
          <div style={{
            width: '40px',
            height: '40px',
            border: '3px solid var(--color-digital-silver)',
            borderTop: '3px solid var(--color-verification-green)',
            borderRadius: '50%',
            animation: 'spin 1s linear infinite',
            margin: '0 auto 1rem auto',
          }} />
          <span style={{ fontFamily: 'var(--font-ui)' }}>Loading bookmarks...</span>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div style={{
        textAlign: 'center',
        padding: '2rem',
        color: 'var(--color-typewriter-red)',
      }}>
        <h3 style={{
          fontFamily: 'var(--font-headlines)',
          marginBottom: '1rem',
        }}>
          Error Loading Bookmarks
        </h3>
        <p>{error}</p>
      </div>
    );
  }

  if (bookmarks.length === 0) {
    return (
      <div style={{
        textAlign: 'center',
        padding: '4rem 2rem',
        color: 'var(--color-black)',
        opacity: 0.7,
      }}>
        <div style={{
          fontSize: '3rem',
          marginBottom: '1rem',
        }}>
          üîñ
        </div>
        <h3 style={{
          fontFamily: 'var(--font-headlines)',
          fontSize: '1.5rem',
          margin: '0 0 1rem 0',
        }}>
          No Bookmarks Yet
        </h3>
        <p style={{
          fontSize: '1rem',
          lineHeight: '1.5',
          maxWidth: '400px',
          margin: '0 auto',
        }}>
          {isOwner 
            ? "You haven't bookmarked any content yet. Start bookmarking articles and proposals to see them here."
            : "This user hasn't bookmarked any content yet."
          }
        </p>
      </div>
    );
  }

  return (
    <div>
      {/* Bookmarks Header */}
      <div style={{ marginBottom: '2rem' }}>
        <h2 style={{
          fontFamily: 'var(--font-headlines)',
          fontSize: '1.5rem',
          margin: '0 0 0.5rem 0',
        }}>
          Bookmarked Content ({bookmarks.length})
        </h2>
        <p style={{
          fontSize: '0.95rem',
          color: 'var(--color-black)',
          opacity: 0.7,
          margin: '0 0 1.5rem 0',
        }}>
          {isOwner ? 'Articles and proposals you\'ve saved for later reading' : 'Content this user has bookmarked'}
        </p>

        {/* Filter Tabs */}
        <div style={{
          display: 'flex',
          gap: '1rem',
          borderBottom: '1px solid var(--color-digital-silver)',
          marginBottom: '1.5rem',
        }}>
          {[
            { key: 'all', label: `All (${bookmarks.length})` },
            { key: 'articles', label: `Articles (${articleBookmarks.length})` },
            { key: 'proposals', label: `Proposals (${proposalBookmarks.length})` }
          ].map(tab => (
            <button
              key={tab.key}
              onClick={() => setFilter(tab.key as any)}
              style={{
                background: 'none',
                border: 'none',
                padding: '0.75rem 0',
                fontFamily: 'var(--font-ui)',
                fontSize: '0.95rem',
                cursor: 'pointer',
                color: filter === tab.key ? 'var(--color-typewriter-red)' : 'var(--color-black)',
                borderBottom: filter === tab.key ? '2px solid var(--color-typewriter-red)' : '2px solid transparent',
                fontWeight: filter === tab.key ? 'bold' : 'normal',
                transition: 'all 0.2s ease',
              }}
            >
              {tab.label}
            </button>
          ))}
        </div>
      </div>

      {/* Bookmarks List */}
      <div style={{
        display: 'flex',
        flexDirection: 'column',
        gap: '1rem',
      }}>
        {filteredBookmarks.map((bookmark) => (
          <div
            key={`${bookmark.contentType}-${bookmark.contentId}`}
            style={{
              backgroundColor: 'var(--color-white)',
              border: '1px solid var(--color-digital-silver)',
              borderLeft: `4px solid ${bookmark.contentType === ContentType.ARTICLE ? 'var(--color-typewriter-red)' : 'var(--color-blockchain-blue)'}`,
              borderRadius: '8px',
              padding: '1.5rem',
              cursor: 'pointer',
              transition: 'all 0.2s ease',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'space-between',
            }}
            onClick={() => openModal(transformBookmarkForDisplay(bookmark))}
            onMouseOver={(e) => {
              e.currentTarget.style.transform = 'translateX(4px)';
              e.currentTarget.style.boxShadow = '0 2px 8px rgba(0, 0, 0, 0.1)';
            }}
            onMouseOut={(e) => {
              e.currentTarget.style.transform = 'translateX(0)';
              e.currentTarget.style.boxShadow = 'none';
            }}
          >
            <div style={{ flex: 1 }}>
              <div style={{
                display: 'flex',
                alignItems: 'center',
                gap: '0.75rem',
                marginBottom: '0.5rem',
              }}>
                <div style={{
                  width: '24px',
                  height: '24px',
                  borderRadius: '50%',
                  backgroundColor: bookmark.contentType === ContentType.ARTICLE ? 'rgba(179, 33, 30, 0.1)' : 'rgba(43, 57, 144, 0.1)',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  color: bookmark.contentType === ContentType.ARTICLE ? 'var(--color-typewriter-red)' : 'var(--color-blockchain-blue)',
                }}>
                  {bookmark.contentType === ContentType.ARTICLE ? 'üì∞' : '‚≠ê'}
                </div>
                
                <h3 style={{
                  fontFamily: 'var(--font-ui)',
                  fontSize: '1.1rem',
                  fontWeight: '600',
                  margin: 0,
                  color: 'var(--color-black)',
                }}>
                  {bookmark.contentType === ContentType.ARTICLE ? 'Article' : 'Proposal'} #{bookmark.contentId}
                </h3>
                
                <span style={{
                  backgroundColor: bookmark.contentType === ContentType.ARTICLE ? 'var(--color-typewriter-red)' : 'var(--color-blockchain-blue)',
                  color: 'var(--color-white)',
                  fontSize: '0.7rem',
                  fontWeight: 'bold',
                  padding: '0.25rem 0.5rem',
                  borderRadius: '4px',
                  textTransform: 'uppercase',
                }}>
                  {bookmark.contentType === ContentType.ARTICLE ? 'Article' : 'Proposal'}
                </span>
              </div>
              
              <div style={{
                fontSize: '0.9rem',
                color: 'var(--color-black)',
                opacity: 0.7,
                fontFamily: 'var(--font-ui)',
              }}>
                Bookmarked: {new Date(Number(bookmark.timestamp) * 1000).toLocaleDateString('en-US', {
                  year: 'numeric',
                  month: 'short',
                  day: 'numeric',
                  hour: '2-digit',
                  minute: '2-digit'
                })}
              </div>
            </div>
            
            <div style={{
              color: 'var(--color-verification-green)',
              fontSize: '1.5rem',
            }}>
              üîñ
            </div>
          </div>
        ))}
      </div>

      {/* Bookmark Detail Modal */}
      <BookmarkDetailModal
        isOpen={modalOpen}
        onClose={() => setModalOpen(false)}
        bookmark={modalData}
      />

      {/* Spinner Animation CSS */}
      <style jsx>{`
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
      `}</style>
    </div>
  );
};

export default Bookmarks;
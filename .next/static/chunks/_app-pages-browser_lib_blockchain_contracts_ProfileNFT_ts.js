"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_lib_blockchain_contracts_ProfileNFT_ts"],{

/***/ "(app-pages-browser)/./deployments/ProfileNFT.json":
/*!*************************************!*\
  !*** ./deployments/ProfileNFT.json ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = /*#__PURE__*/JSON.parse('{"contractName":"ProfileNFT","address":"0x0c4141ec0d87fA1B7820E5AF277024251d392F05","network":"flowTestnet","deployer":"0x9402F9f20b4a27b55B1cC6cf015D98f764814fb2","deployedAt":"2025-05-28T18:26:58.229Z","membershipTokenAddress":"0xC90bE82B23Dca9453445b69fB22D5A90402654b2","publisherCredentialsAddress":"0x8b351Bc93799898a201E796405dBC30Aad49Ee21"}');

/***/ }),

/***/ "(app-pages-browser)/./lib/blockchain/contracts/ProfileNFT.abi.json":
/*!******************************************************!*\
  !*** ./lib/blockchain/contracts/ProfileNFT.abi.json ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = /*#__PURE__*/JSON.parse('[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"profileId","type":"uint256"},{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint256","name":"membershipTokenId","type":"uint256"},{"indexed":false,"internalType":"string","name":"displayName","type":"string"}],"name":"ProfileMinted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"profileId","type":"uint256"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"ProfileTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"profileId","type":"uint256"},{"indexed":false,"internalType":"string[]","name":"fieldsUpdated","type":"string[]"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"ProfileUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"MEMBERSHIP_TOKEN","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PUBLISHER_CREDENTIALS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"addressToProfileId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"profileId","type":"uint256"}],"name":"getProfile","outputs":[{"components":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"membershipTokenId","type":"uint256"},{"internalType":"string","name":"displayName","type":"string"},{"internalType":"string","name":"bio","type":"string"},{"internalType":"string","name":"avatarUrl","type":"string"},{"internalType":"string","name":"location","type":"string"},{"internalType":"uint256","name":"createdAt","type":"uint256"},{"internalType":"uint256","name":"lastUpdatedAt","type":"uint256"},{"internalType":"string","name":"tosVersion","type":"string"},{"internalType":"uint256","name":"tosAcceptedAt","type":"uint256"}],"internalType":"struct ProfileNFT.Profile","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"getProfileByAddress","outputs":[{"components":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"membershipTokenId","type":"uint256"},{"internalType":"string","name":"displayName","type":"string"},{"internalType":"string","name":"bio","type":"string"},{"internalType":"string","name":"avatarUrl","type":"string"},{"internalType":"string","name":"location","type":"string"},{"internalType":"uint256","name":"createdAt","type":"uint256"},{"internalType":"uint256","name":"lastUpdatedAt","type":"uint256"},{"internalType":"string","name":"tosVersion","type":"string"},{"internalType":"uint256","name":"tosAcceptedAt","type":"uint256"}],"internalType":"struct ProfileNFT.Profile","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"profileId","type":"uint256"}],"name":"getProfileHistory","outputs":[{"components":[{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"string","name":"fieldName","type":"string"},{"internalType":"string","name":"oldValue","type":"string"},{"internalType":"string","name":"newValue","type":"string"},{"internalType":"address","name":"updatedBy","type":"address"}],"internalType":"struct ProfileNFT.ProfileUpdate[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"profileId","type":"uint256"}],"name":"getProfileMembershipToken","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"hasProfile","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"displayName","type":"string"},{"internalType":"string","name":"bio","type":"string"},{"internalType":"string","name":"avatarUrl","type":"string"},{"internalType":"string","name":"location","type":"string"},{"internalType":"string","name":"tosVersion","type":"string"}],"name":"mintProfile","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"profileHistory","outputs":[{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"string","name":"fieldName","type":"string"},{"internalType":"string","name":"oldValue","type":"string"},{"internalType":"string","name":"newValue","type":"string"},{"internalType":"address","name":"updatedBy","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"profiles","outputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"membershipTokenId","type":"uint256"},{"internalType":"string","name":"displayName","type":"string"},{"internalType":"string","name":"bio","type":"string"},{"internalType":"string","name":"avatarUrl","type":"string"},{"internalType":"string","name":"location","type":"string"},{"internalType":"uint256","name":"createdAt","type":"uint256"},{"internalType":"uint256","name":"lastUpdatedAt","type":"uint256"},{"internalType":"string","name":"tosVersion","type":"string"},{"internalType":"uint256","name":"tosAcceptedAt","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"profileId","type":"uint256"},{"internalType":"string","name":"displayName","type":"string"},{"internalType":"string","name":"bio","type":"string"},{"internalType":"string","name":"avatarUrl","type":"string"},{"internalType":"string","name":"location","type":"string"}],"name":"updateProfile","outputs":[],"stateMutability":"nonpayable","type":"function"}]');

/***/ }),

/***/ "(app-pages-browser)/./lib/blockchain/contracts/ProfileNFT.ts":
/*!************************************************!*\
  !*** ./lib/blockchain/contracts/ProfileNFT.ts ***!
  \************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProfileNFTService: () => (/* binding */ ProfileNFTService)\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/contract/contract.js\");\n/* harmony import */ var _ProfileNFT_abi_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ProfileNFT.abi.json */ \"(app-pages-browser)/./lib/blockchain/contracts/ProfileNFT.abi.json\");\n/* harmony import */ var _deployments_ProfileNFT_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/deployments/ProfileNFT.json */ \"(app-pages-browser)/./deployments/ProfileNFT.json\");\n// lib/blockchain/contracts/ProfileNFT.ts\n\n\n\nclass ProfileNFTService {\n    // Create a new profile (mint NFT)\n    async createProfile(displayName, bio, avatarUrl, location) {\n        let tosVersion = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : \"1.0\";\n        try {\n            // Call the mintProfile function\n            const tx = await this.contract.mintProfile(displayName, bio, avatarUrl || '', location, tosVersion);\n            // Wait for transaction confirmation\n            const receipt = await tx.wait();\n            // Extract profileId from the ProfileMinted event\n            const mintEvent = receipt.logs.find((log)=>{\n                var _log_fragment;\n                return ((_log_fragment = log.fragment) === null || _log_fragment === void 0 ? void 0 : _log_fragment.name) === 'ProfileMinted';\n            });\n            if (!mintEvent) {\n                throw new Error('Profile minting event not found');\n            }\n            const profileId = mintEvent.args.profileId.toString();\n            return {\n                profileId,\n                txHash: receipt.hash\n            };\n        } catch (error) {\n            var _error_message, _error_message1, _error_message2, _error_message3, _error_message4;\n            // Handle specific contract errors\n            if ((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes('Must hold ImmutableType membership token')) {\n                throw new Error('You must hold an ImmutableType membership token (IT00-IT99) to create a profile');\n            }\n            if ((_error_message1 = error.message) === null || _error_message1 === void 0 ? void 0 : _error_message1.includes('Address already has a profile')) {\n                throw new Error('This wallet already has a profile');\n            }\n            if ((_error_message2 = error.message) === null || _error_message2 === void 0 ? void 0 : _error_message2.includes('Display name cannot be empty')) {\n                throw new Error('Display name is required');\n            }\n            if ((_error_message3 = error.message) === null || _error_message3 === void 0 ? void 0 : _error_message3.includes('Display name too long')) {\n                throw new Error('Display name must be 50 characters or less');\n            }\n            if ((_error_message4 = error.message) === null || _error_message4 === void 0 ? void 0 : _error_message4.includes('Bio too long')) {\n                throw new Error('Bio must be 500 characters or less');\n            }\n            throw error;\n        }\n    }\n    // Get profile by ID\n    async getProfile(profileId) {\n        try {\n            const profile = await this.contract.getProfile(profileId);\n            return {\n                id: profile.id.toString(),\n                owner: profile.owner,\n                membershipTokenId: profile.membershipTokenId.toString(),\n                displayName: profile.displayName,\n                bio: profile.bio,\n                avatarUrl: profile.avatarUrl,\n                location: profile.location,\n                createdAt: new Date(Number(profile.createdAt) * 1000).toISOString(),\n                lastUpdatedAt: new Date(Number(profile.lastUpdatedAt) * 1000).toISOString(),\n                tosVersion: profile.tosVersion,\n                tosAcceptedAt: new Date(Number(profile.tosAcceptedAt) * 1000).toISOString()\n            };\n        } catch (error) {\n            var _error_message;\n            if ((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes('Profile does not exist')) {\n                return null;\n            }\n            throw error;\n        }\n    }\n    // Get profile by wallet address\n    async getProfileByAddress(address) {\n        try {\n            const profile = await this.contract.getProfileByAddress(address);\n            return {\n                id: profile.id.toString(),\n                owner: profile.owner,\n                membershipTokenId: profile.membershipTokenId.toString(),\n                displayName: profile.displayName,\n                bio: profile.bio,\n                avatarUrl: profile.avatarUrl,\n                location: profile.location,\n                createdAt: new Date(Number(profile.createdAt) * 1000).toISOString(),\n                lastUpdatedAt: new Date(Number(profile.lastUpdatedAt) * 1000).toISOString(),\n                tosVersion: profile.tosVersion,\n                tosAcceptedAt: new Date(Number(profile.tosAcceptedAt) * 1000).toISOString()\n            };\n        } catch (error) {\n            var _error_message;\n            if ((_error_message = error.message) === null || _error_message === void 0 ? void 0 : _error_message.includes('Address has no profile')) {\n                return null;\n            }\n            throw error;\n        }\n    }\n    // Check if address has a profile\n    async hasProfile(address) {\n        return await this.contract.hasProfile(address);\n    }\n    // Update profile\n    async updateProfile(profileId, displayName, bio, avatarUrl, location) {\n        const tx = await this.contract.updateProfile(profileId, displayName, bio, avatarUrl || '', location);\n        const receipt = await tx.wait();\n        return {\n            txHash: receipt.hash\n        };\n    }\n    // Get profile update history\n    async getProfileHistory(profileId) {\n        const history = await this.contract.getProfileHistory(profileId);\n        return history.map((update)=>({\n                timestamp: new Date(Number(update.timestamp) * 1000).toISOString(),\n                fieldName: update.fieldName,\n                oldValue: update.oldValue,\n                newValue: update.newValue,\n                updatedBy: update.updatedBy\n            }));\n    }\n    // Get the membership token ID for a profile\n    async getProfileMembershipToken(profileId) {\n        const tokenId = await this.contract.getProfileMembershipToken(profileId);\n        return tokenId.toString();\n    }\n    // Get total number of profiles\n    async getTotalProfiles() {\n        try {\n            // Since the contract doesn't expose a totalSupply or counter,\n            // we'll need to find profiles by checking which IDs exist\n            let count = 0;\n            let id = 1;\n            let consecutiveMisses = 0;\n            // Keep checking until we get 5 consecutive misses\n            while(consecutiveMisses < 5 && id <= 1000){\n                try {\n                    await this.contract.getProfile(id);\n                    count = id; // Update count to the highest found ID\n                    consecutiveMisses = 0; // Reset consecutive misses\n                } catch (error) {\n                    consecutiveMisses++;\n                }\n                id++;\n            }\n            return count;\n        } catch (error) {\n            console.error('Error getting total profiles:', error);\n            return 0;\n        }\n    }\n    // Get multiple profiles by ID range\n    async getProfileBatch(startId, limit) {\n        const profiles = [];\n        // Fetch profiles in parallel for better performance\n        const promises = [];\n        for(let i = startId; i <= startId + limit - 1; i++){\n            promises.push(this.getProfile(i.toString()));\n        }\n        const results = await Promise.all(promises);\n        // Filter out null results (non-existent profiles)\n        for (const profile of results){\n            if (profile) {\n                profiles.push(profile);\n            }\n        }\n        return profiles;\n    }\n    // Get profiles with pagination (returns profiles in reverse order - newest first)\n    async getProfilesPaginated(limit) {\n        let offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n        const profiles = [];\n        // Simple approach: just try to fetch the first N profiles starting from ID 1\n        console.log(\"Attempting to fetch up to \".concat(limit, \" profiles starting from ID \").concat(offset + 1));\n        let foundCount = 0;\n        let checkedCount = 0;\n        const startId = offset + 1;\n        const maxToCheck = 100; // Don't check more than 100 IDs in one request\n        for(let i = startId; i < startId + maxToCheck && foundCount < limit; i++){\n            try {\n                console.log(\"Checking profile ID \".concat(i, \"...\"));\n                const profile = await this.getProfile(i.toString());\n                if (profile) {\n                    console.log(\"Found profile \".concat(i, \":\"), profile.displayName);\n                    profiles.push(profile);\n                    foundCount++;\n                }\n            } catch (error) {\n                console.log(\"Profile \".concat(i, \" doesn't exist\"));\n            }\n            checkedCount++;\n        }\n        console.log(\"Found \".concat(foundCount, \" profiles after checking \").concat(checkedCount, \" IDs\"));\n        // Simple hasMore logic: if we found as many as requested, there might be more\n        const hasMore = foundCount === limit;\n        return {\n            profiles,\n            total: foundCount,\n            hasMore\n        };\n    }\n    constructor(provider, signer){\n        this.provider = provider;\n        this.contract = new ethers__WEBPACK_IMPORTED_MODULE_2__.Contract(_deployments_ProfileNFT_json__WEBPACK_IMPORTED_MODULE_1__.address, _ProfileNFT_abi_json__WEBPACK_IMPORTED_MODULE_0__, signer || provider);\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/blockchain/contracts/ProfileNFT.ts\n"));

/***/ })

}]);
// app/[city]/news/[category]/[slug]/page.tsx
'use client'
import React from 'react';
import { Metadata } from 'next';
import { notFound } from 'next/navigation';
import { useArticleDetail } from '../../../../../lib/reader/hooks/useArticleDetail';
import { Article } from '../../../../../lib/reader/types/article';

// Rest of the file remains the same...
// Mock implementations for missing modules (replace these when actual modules exist)
const urlOptimizer = {
  isValidCity: (city: string): boolean => {
    // Mock validation - only Miami is valid for now
    return city.toLowerCase() === 'miami';
  },
  extractArticleIdFromSlug: (slug: string): string | null => {
    // Extract article ID from slug format: "articleId-title-slug"
    const parts = slug.split('-');
    return parts[0] || null;
  },
  buildArticleBreadcrumbs: (city: string, state: string, category: string, article: Article | null) => {
    return [
      { label: 'Home', href: '/' },
      { label: state, href: `/locations/${state.toLowerCase()}` },
      { label: city, href: `/locations/${state.toLowerCase()}/${city.toLowerCase()}` },
      { label: 'News', href: `/locations/${state.toLowerCase()}/${city.toLowerCase()}/news` },
      { label: category.charAt(0).toUpperCase() + category.slice(1), href: `/locations/${state.toLowerCase()}/${city.toLowerCase()}/news#${category}` },
      { label: article?.title || 'Article', href: null }
    ];
  }
};

const metadataService = {
  generateNotFoundMetadata: (): Metadata => ({
    title: 'Article Not Found',
    description: 'The requested article could not be found.'
  }),
  generateArticleMetadata: (params: {
    id: string;
    title: string;
    category: string;
    city: string;
    state: string;
    slug: string;
  }): Metadata => ({
    title: `${params.title} - ${params.city} ${params.category} News`,
    description: `Read ${params.title} from ${params.city}, ${params.state}`,
    openGraph: {
      title: params.title,
      description: `Local news from ${params.city}, ${params.state}`,
      type: 'article'
    }
  })
};

// Mock LocationSEO component
const LocationSEO: React.FC<{
  city: string;
  state: string;
  type: string;
  article?: Article | null;
}> = ({ city, state, type, article }) => {
  return null; // Mock component - replace with actual implementation
};

// Type definitions
interface BreadcrumbItem {
  label: string;
  href: string | null;
}

interface PageProps {
  params: Promise<{
    city: string;
    category: string;
    slug: string;
  }>;
}


// Main page component
export default async function GeographicArticlePage({ params }: PageProps) {
  const { city, category, slug } = await params;
  const state = 'Florida'; // Hardcoded for Miami MVP
  
  // Validate city
  if (!urlOptimizer.isValidCity(city)) {
    notFound();
  }
  
  // Extract article ID from slug
  const articleId = urlOptimizer.extractArticleIdFromSlug(slug);
  if (!articleId) {
    notFound();
  }
  
  return <GeographicArticleContent articleId={articleId} city={city} state={state} category={category} slug={slug} />;
}

// Client component for article content
function GeographicArticleContent({ 
  articleId, 
  city, 
  state, 
  category, 
  slug 
}: { 
  articleId: string; 
  city: string; 
  state: string; 
  category: string; 
  slug: string; 
}) {
  'use client';
  
  // Use the correct hook interface from your system
  const { article, proposalDetails, isLoading, error } = useArticleDetail(articleId);
  
  // Generate breadcrumbs
  const breadcrumbs: BreadcrumbItem[] = urlOptimizer.buildArticleBreadcrumbs(city, state, category, article);
  
  if (isLoading) {
    return (
      <div style={{
        padding: '2rem',
        maxWidth: '800px',
        margin: '0 auto'
      }}>
        <div style={{
          textAlign: 'center',
          padding: '3rem 0',
          fontFamily: 'var(--font-ui)',
          color: 'var(--color-digital-silver)'
        }}>
          Loading article from blockchain...
        </div>
      </div>
    );
  }
  
  if (error || !article) {
    notFound();
  }
  
  return (
    <div style={{
      padding: '1rem',
      maxWidth: '800px',
      margin: '0 auto',
      fontFamily: 'var(--font-body)'
    }}>
      {/* SEO Component */}
      <LocationSEO 
        city={city}
        state={state}
        type="article"
        article={article}
      />
      
      {/* Breadcrumb Navigation */}
      <nav style={{
        marginBottom: '2rem',
        fontSize: '0.9rem',
        color: 'var(--color-digital-silver)'
      }}>
        {breadcrumbs.map((crumb: BreadcrumbItem, index: number) => (
          <span key={index}>
            {index > 0 && ' > '}
            {crumb.href ? (
              <a 
                href={crumb.href}
                style={{
                  color: 'var(--color-blockchain-blue)',
                  textDecoration: 'none'
                }}
                onMouseOver={(e) => e.currentTarget.style.textDecoration = 'underline'}
                onMouseOut={(e) => e.currentTarget.style.textDecoration = 'none'}
              >
                {crumb.label}
              </a>
            ) : (
              <span style={{ color: 'var(--color-black)' }}>{crumb.label}</span>
            )}
          </span>
        ))}
      </nav>
      
      {/* Article Header */}
      <header style={{ marginBottom: '2rem' }}>
        <div style={{
          display: 'flex',
          alignItems: 'center',
          gap: '1rem',
          marginBottom: '1rem',
          fontSize: '0.9rem',
          color: 'var(--color-digital-silver)'
        }}>
          <span style={{
            backgroundColor: 'var(--color-verification-green)',
            color: 'white',
            padding: '0.25rem 0.5rem',
            borderRadius: '4px',
            fontSize: '0.8rem',
            fontWeight: 'bold'
          }}>
            {city.toUpperCase()}
          </span>
          <span style={{
            backgroundColor: 'var(--color-blockchain-blue)',
            color: 'white',
            padding: '0.25rem 0.5rem',
            borderRadius: '4px',
            fontSize: '0.8rem',
            textTransform: 'uppercase'
          }}>
            {category}
          </span>
          <span>{new Date(article.createdAt).toLocaleDateString()}</span>
        </div>
        
        <h1 style={{
          fontFamily: 'var(--font-headlines)',
          fontSize: '2.5rem',
          lineHeight: '1.2',
          marginBottom: '1rem',
          color: 'var(--color-black)'
        }}>
          {article.title}
        </h1>
        
        <div style={{
          fontSize: '1.2rem',
          lineHeight: '1.5',
          color: 'var(--color-digital-silver)',
          marginBottom: '1.5rem',
          fontStyle: 'italic'
        }}>
          {article.summary}
        </div>
        
        <div style={{
          display: 'flex',
          alignItems: 'center',
          gap: '1rem',
          paddingBottom: '1rem',
          borderBottom: '1px solid var(--color-digital-silver)'
        }}>
          <div>
            <strong>By {article.authorName || article.author}</strong>
            <span style={{ color: 'var(--color-digital-silver)', marginLeft: '0.5rem' }}>
              ({article.authorType})
            </span>
          </div>
          
          {article.contentHash && (
            <div style={{
              display: 'flex',
              alignItems: 'center',
              gap: '0.5rem',
              marginLeft: 'auto'
            }}>
              <span style={{
                backgroundColor: 'var(--color-verification-green)',
                color: 'white',
                padding: '0.25rem 0.5rem',
                borderRadius: '4px',
                fontSize: '0.8rem',
                fontWeight: 'bold'
              }}>
                âœ“ VERIFIED
              </span>
              <span style={{
                fontSize: '0.8rem',
                color: 'var(--color-digital-silver)',
                fontFamily: 'monospace'
              }}>
                {article.contentHash}
              </span>
            </div>
          )}
        </div>
      </header>
      
      {/* Article Content */}
      <main>
        <div style={{
          fontSize: '1.1rem',
          lineHeight: '1.8',
          color: 'var(--color-black)'
        }}>
          {article.content.split('\n').map((paragraph: string, index: number) => (
            paragraph.trim() && (
              <p key={index} style={{ marginBottom: '1.5rem' }}>
                {paragraph}
              </p>
            )
          ))}
        </div>
      </main>
      
      {/* Article Footer */}
      <footer style={{
        marginTop: '3rem',
        paddingTop: '2rem',
        borderTop: '1px solid var(--color-digital-silver)'
      }}>
        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
          gap: '2rem',
          marginBottom: '2rem'
        }}>
          <div>
            <h3 style={{
              fontFamily: 'var(--font-headlines)',
              fontSize: '1.2rem',
              marginBottom: '1rem'
            }}>
              Article Metrics
            </h3>
            <div style={{ fontSize: '0.9rem', color: 'var(--color-digital-silver)' }}>
              <div>Views: {article.readerMetrics.viewCount}</div>
              <div>Comments: {article.readerMetrics.commentCount}</div>
              <div>Tips Received: {article.readerMetrics.tipAmount} FLOW</div>
            </div>
          </div>
          
          {article.proposalId && (
            <div>
              <h3 style={{
                fontFamily: 'var(--font-headlines)',
                fontSize: '1.2rem',
                marginBottom: '1rem'
              }}>
                Community Funded
              </h3>
              <div style={{ fontSize: '0.9rem', color: 'var(--color-digital-silver)' }}>
                This article was funded by community proposal.
                <br />
                <a 
                  href={`/news-proposals/${article.proposalId}`}
                  style={{
                    color: 'var(--color-blockchain-blue)',
                    textDecoration: 'none'
                  }}
                  onMouseOver={(e) => e.currentTarget.style.textDecoration = 'underline'}
                  onMouseOut={(e) => e.currentTarget.style.textDecoration = 'none'}
                >
                  View Original Proposal
                </a>
              </div>
            </div>
          )}
        </div>
        
        <div style={{
          fontSize: '0.8rem',
          color: 'var(--color-digital-silver)',
          textAlign: 'center',
          paddingTop: '1rem',
          borderTop: '1px solid var(--color-parchment)'
        }}>
          This article is permanently stored on the Flow EVM blockchain and cannot be altered or removed.
        </div>
      </footer>
    </div>
  );
}
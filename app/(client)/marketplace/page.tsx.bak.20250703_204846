// app/(client)/marketplace/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useWallet } from '@/lib/hooks/useWallet';
import EncryptedArticleReadService from '@/lib/blockchain/contracts/EncryptedArticleReadService';
import ArticleNFTCard from '@/components/cards/types/ArticleNFTCard';
import { EmojiPurchaseButton } from '@/components/emoji/EmojiPurchaseButton';
import { EmojiPurchaseModal } from '@/components/emoji/EmojiPurchaseModal';
import confetti from 'canvas-confetti';

interface Article {
  id: string;
  title: string;
  summary: string;
  author: string;
  location: string;
  category: string;
  publishedAt: string;
}

export default function MarketplacePage() {
  const { isConnected } = useWallet();
  const router = useRouter();
  const [articles, setArticles] = useState<Article[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isPurchaseModalOpen, setIsPurchaseModalOpen] = useState(false);

  useEffect(() => {
    loadAllArticles();
  }, []);

  const loadAllArticles = async () => {
    console.log('üîç Loading marketplace articles from all publishers...');

    try {
      setIsLoading(true);
      const service = new EncryptedArticleReadService();
      
      const totalArticles = await service.getTotalArticles();
      console.log('üìä Total articles in contract:', totalArticles);
      
      const allArticles: Article[] = [];

      // Load all articles from all publishers
      for (let i = 1; i <= totalArticles; i++) {
        try {
          console.log(`üîç Processing article ${i}/${totalArticles}...`);
          const article = await service.getArticle(i);
          
          // Add all articles regardless of author (this is the marketplace!)
          allArticles.push({
            id: article.id.toString(),
            title: article.title,
            summary: article.summary,
            author: article.author,
            location: article.location,
            category: article.category,
            publishedAt: new Date(Number(article.publishedAt) * 1000).toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'short',
              day: 'numeric'
            })
          });
          
          console.log(`‚úÖ Article ${i} added: ${article.title}`);
          
        } catch (articleError) {
          console.warn(`‚ö†Ô∏è Could not load article ${i}:`, articleError);
          continue;
        }
      }

      // Sort by published date (newest first)
      allArticles.sort((a, b) => new Date(b.publishedAt).getTime() - new Date(a.publishedAt).getTime());
      
      console.log(`üìà Final results: ${allArticles.length} articles loaded from ${totalArticles} total`);
      
      setArticles(allArticles);
      
    } catch (error) {
      console.error('‚ùå Critical error loading marketplace articles:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleCardClick = (articleId: string) => {
    router.push(`/miami/news/general/native_${articleId}`);
  };

  // üéâ CONFETTI CELEBRATION for EMOJI purchases
  const celebrateEmojiPurchase = (emojiAmount: number) => {
    // Main confetti burst from center-right (where purchase button is)
    const colors = ['#FF6B9D', '#FFD700', '#4ECDC4', '#FFA500', '#FF69B4'];

    confetti({
      particleCount: 150,
      spread: 70,
      origin: { x: 0.8, y: 0.3 }, // Top-right area where EMOJI widget is
      colors: colors,
      ticks: 400,
    });

    // EMOJI shapes confetti
    const emojiShapes = confetti.shapeFromText({ text: 'üéâ', scalar: 2 });
    const moneyShapes = confetti.shapeFromText({ text: 'üí∞', scalar: 2 });
    const sparkleShapes = confetti.shapeFromText({ text: '‚ú®', scalar: 2 });

    confetti({
      shapes: [emojiShapes, moneyShapes, sparkleShapes],
      particleCount: 30,
      spread: 60,
      origin: { x: 0.8, y: 0.3 },
      scalar: 2,
      ticks: 400,
    });

    // Bonus burst for large purchases
    if (emojiAmount >= 1000) {
      setTimeout(() => {
        confetti({
          particleCount: 100,
          angle: 60,
          spread: 45,
          origin: { x: 0, y: 0.9 },
          colors: ['#FFD700', '#FFA500'],
        });
        confetti({
          particleCount: 100,
          angle: 120,
          spread: 45,
          origin: { x: 1, y: 0.9 },
          colors: ['#FFD700', '#FFA500'],
        });
      }, 300);
    }
  };

  const handlePurchaseSuccess = (result: any) => {
    console.log('‚úÖ EMOJI purchase successful:', result);
    
    // üîÑ EMIT EVENT for balance refresh
    window.dispatchEvent(new CustomEvent('emojiBalanceChanged'));
    
    // üéâ TRIGGER CONFETTI
    if (result.emojiAmount) {
      celebrateEmojiPurchase(result.emojiAmount);
    }
  };

  // Styles - FIXED: Removed maxWidth constraint to match ArticlesTab
  const containerStyle: React.CSSProperties = {
    padding: '2rem',
    margin: '0 auto' // Removed maxWidth: '1200px' to match ArticlesTab
  };

  const headerStyle: React.CSSProperties = {
    marginBottom: '2rem',
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    gap: '2rem'
  };

  const headerLeftStyle: React.CSSProperties = {
    flex: 1
  };

  const headerRightStyle: React.CSSProperties = {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'flex-end',
    gap: '0.75rem',
    minWidth: '220px'
  };

  const titleStyle: React.CSSProperties = {
    fontSize: '2.5rem',
    fontWeight: 'bold',
    color: 'var(--color-black)',
    marginBottom: '1rem',
    fontFamily: 'var(--font-headlines)',
    margin: 0
  };

  const subtitleStyle: React.CSSProperties = {
    fontSize: '1.1rem',
    color: '#666',
    margin: 0
  };

  const gridStyle: React.CSSProperties = {
    display: 'grid',
    gridTemplateColumns: 'repeat(auto-fit, minmax(380px, 1fr))', // EXACTLY same as ArticlesTab
    gap: '1.5rem'
  };

  const emojiCtaStyle: React.CSSProperties = {
    backgroundColor: 'rgba(255, 107, 157, 0.1)', // Miami pink with transparency
    border: '2px solid rgba(255, 107, 157, 0.3)',
    borderRadius: '12px',
    padding: '1rem',
    textAlign: 'center',
    maxWidth: '200px'
  };

  if (isLoading) {
    return (
      <div style={containerStyle}>
        <div style={{
          ...headerStyle,
          justifyContent: 'center',
          textAlign: 'center'
        }}>
          <div>
            <h1 style={titleStyle}>Loading Marketplace...</h1>
            <p style={subtitleStyle}>Fetching all published articles from the blockchain...</p>
          </div>
        </div>
        <div style={{
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          padding: '3rem',
        }}>
          <div style={{
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            gap: '1rem',
          }}>
            <div style={{
              width: '40px',
              height: '40px',
              border: '3px solid var(--color-digital-silver)',
              borderTop: '3px solid var(--color-typewriter-red)',
              borderRadius: '50%',
              animation: 'spin 1s linear infinite',
            }}></div>
            <span style={{ fontFamily: 'var(--font-ui)' }}>
              Loading articles from all publishers...
            </span>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div style={containerStyle}>
      {/* Header - Option A with Enhanced EMOJI CTA */}
      <div 
        className="marketplace-header"
        style={headerStyle}
      >
        <div style={headerLeftStyle}>
          <h1 style={titleStyle}>Article NFT Marketplace</h1>
          <p style={subtitleStyle}>
            Discover and collect limited edition article NFTs from verified publishers
          </p>
        </div>
        
        <div 
          className="marketplace-header-right"
          style={headerRightStyle}
        >
          {isConnected && (
            <div style={emojiCtaStyle}>
              {/* Enhanced EMOJI CTA with emojis */}
              <div style={{
                fontSize: '1.5rem',
                marginBottom: '0.5rem',
                lineHeight: '1.2'
              }}>
                üéâüí∞‚ú®
              </div>
              
              <div style={{
                fontSize: '0.9rem',
                fontWeight: '600',
                color: 'var(--color-typewriter-red)',
                fontFamily: 'var(--font-ui)',
                marginBottom: '0.75rem'
              }}>
                Power Your Engagement
              </div>
              
              <EmojiPurchaseButton
                onClick={() => setIsPurchaseModalOpen(true)}
                variant="primary"
              />
              
              <div style={{
                fontSize: '0.75rem',
                color: '#666',
                marginTop: '0.5rem',
                fontFamily: 'var(--font-body)'
              }}>
                üî• Tip ‚Ä¢ üí¨ React ‚Ä¢ üó≥Ô∏è Vote
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Articles Grid - EXACTLY same as ArticlesTab */}
      {articles.length === 0 ? (
        <div style={{ textAlign: 'center', padding: '3rem', color: '#666' }}>
          <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>üì∞</div>
          <h3 style={{
            fontFamily: 'var(--font-headlines)',
            fontSize: '1.5rem',
            marginBottom: '1rem',
          }}>
            No Articles Available
          </h3>
          <p style={{
            fontSize: '1rem',
            lineHeight: '1.5',
            maxWidth: '400px',
            margin: '0 auto',
          }}>
            No articles have been published to the marketplace yet. Check back soon for new content from verified publishers.
          </p>
        </div>
      ) : (
        <div style={gridStyle}>
          {articles.map((article) => (
            <ArticleNFTCard
              key={article.id}
              article={article}
              onCardClick={handleCardClick}
              showPurchaseButton={true}
            />
          ))}
        </div>
      )}

      {/* EMOJI Purchase Modal */}
      <EmojiPurchaseModal
        isOpen={isPurchaseModalOpen}
        onClose={() => setIsPurchaseModalOpen(false)}
        onSuccess={handlePurchaseSuccess}
      />

      <style jsx>{`
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        @media (max-width: 768px) {
          .marketplace-header {
            flex-direction: column !important;
            align-items: stretch !important;
            gap: 1rem !important;
          }
          
          .marketplace-header-right {
            align-items: stretch !important;
          }
        }
      `}</style>
    </div>
  );
}
// lib/reader/hooks/useArticleDetail.ts
'use client'
import { useState, useEffect } from 'react';
import { Article } from '../types/article';
import blockchainReaderService from '../services/blockchainReaderService';
import proposalIntegrationService from '../services/proposalIntegrationService';

export const useArticleDetail = (articleId: string) => {
  const [article, setArticle] = useState<Article | null>(null);
  const [proposalDetails, setProposalDetails] = useState<any>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchArticle = async () => {
      if (!articleId) {
        setArticle(null);
        setIsLoading(false);
        return;
      }
      
      setIsLoading(true);
      setError(null);
      
      try {
        const data = await blockchainReaderService.getArticleById(articleId);
        setArticle(data);
        
        // Record view (in a real app, would check if user has already viewed)
        if (data) {
          await blockchainReaderService.recordView(articleId, "0x7h8i9j0k1l2m3n4o5p"); // Mock user ID
          
          // If the article was derived from a proposal, fetch proposal details
          if (data.proposalId) {
            const details = await proposalIntegrationService.getProposalDetailsForArticle(data.proposalId);
            setProposalDetails(details);
          }
        }
      } catch (err) {
        setError('Failed to fetch article from blockchain');
        console.error('Error fetching article:', err);
      } finally {
        setIsLoading(false);
      }
    };

    fetchArticle();
  }, [articleId]);

  return { article, proposalDetails, isLoading, error };
};

export default useArticleDetail;